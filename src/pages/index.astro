---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';

---

<Layout title="Welcome to Astro.">
	<main>
		<div id="jumbo-intro" class="flex justify-around items-center">

			<div>
				<h1 class=" text-6xl font-black text-yellow-200 font-mono">ServerMan</h1>
				<h2 class="text-4xl font-bold text-purple-400 text-left">You Server CLI Super hero</h2>
				<p>ServerMan is a CLI tool that helps you to manage your server with ease from your terminal </p>
				<p>
					You can have your apps deployed on some of the most popular providers like  Digital Ocean, Netlify, Vercel.
					Don't worry, we've got you covered!
				</p>		
				<p>
					What else can you ask for? Oh yes it's also open source!
				</p>
			</div>
			<div id="server">
				
			</div>
		</div>
		<div id="about" class=" my-10">

			<div class="flex">
				<div class=" pr-20 pb-20">
					<img src="/hand.jpg" alt="ServerMan" class="astro-a" />	
				</div>
				<div class=" text-right">
					<h2 class="section_title my-5 text-right">Why Serverman</h2>
					<p>
						We know that managing servers can be a pain, especially when you have to do it manually. 
						That's why we created ServerMan, to help you manage your server with ease.
					</p>
					<p>
						With ServerMan, you can deploy your apps to popular providers like Digital Ocean, Netlify, Vercel and more.
						You can also manage your server, add or remove websites or connect trough SSH.
					</p>
				</div>
			</div>
		</div>
		<div>

		</div>
		<div id="features">
			<h2 class="section_title font-bold">Features</h2>
			<div class="link-card-grid">
				<Card
					title="Easy to use"
					body="ServerMan is easy to use. A uinque CLI to reach your servers and deploy your repos."
				/>
				<Card
					title="Cross Platform"
					body="Just install it and use it. No OS related configs needed."
				/>
				<Card
					title="Stragithforward"
					body="Don't overthink your deploys. Just use ServerMan and get your app live in seconds."
				/>
			</div>
		</div>
		<div id="install" class="my-10">
			<h2 class="section_title">Install</h2>

				<p>Install ServerMan with npm </p>
			<div class="instructions">
				<code>npm install -g ghostylab@serverman</code>
			</div>
		</div>	
	</main>

</Layout>
<script>
 

import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import {GUI} from 'dat.gui';
import { getLeadingCommentRanges } from 'typescript';
 // Load 3D Scene
var scene = new THREE.Scene(); 

 // Load Camera Perspektive

 const size = {
	width : 1024,
	height : 720
 }
var camera = new THREE.PerspectiveCamera( 10, size.width / size.height, 1, 20000 );
camera.position.set( 100, 5000, 5000 );
	
 // Load a Renderer
var renderer = new THREE.WebGLRenderer({ alpha: false });
renderer.setClearColor( "#13151a" );
renderer.setPixelRatio( window.devicePixelRatio );
renderer.setSize(size.width, size.height);
const server = document.getElementById('server');
server.appendChild(renderer.domElement);
	
 // Load the Orbitcontroller
var controls = new OrbitControls( camera, renderer.domElement ); 

			
 // Load Light
var ambientLight = new THREE.AmbientLight( 0xcccccc );
scene.add( ambientLight );
			
var directionalLight = new THREE.DirectionalLight( 0xffffff );
directionalLight.position.set( 0, 1, 1 ).normalize();
scene.add( directionalLight );

const gui = new GUI();
const modelFolder = gui.addFolder('Model');
 // glTf 2.0 Loader
var loader = new GLTFLoader();
	loader.load( '/server/scene.gltf', function ( gltf ) {             
	var object = gltf.scene;				
	gltf.scene.scale.set( 2, 2, 2 );
	gltf.scene.rotation.set(6,7,0);
	gltf.scene.position.set(0,-150,5);			   
	modelFolder.add(gltf.scene.rotation, 'x', -10, 10);
	modelFolder.add(gltf.scene.rotation, 'y', -10, 10);
	modelFolder.add(gltf.scene.rotation, 'z', -10, 10);
	modelFolder.add(gltf.scene.position, 'x', -100, 100);
	modelFolder.add(gltf.scene.position, 'y', -100, 100);
	modelFolder.add(gltf.scene.position, 'z', -100, 100);
	modelFolder.open();
	scene.add( gltf.scene );
	});	 
const cameraFolder = gui.addFolder('Camera');
cameraFolder.add(camera.position, 'x', -10000, 10000);
cameraFolder.add(camera.position, 'y', -10000, 10000);
cameraFolder.add(camera.position, 'z', -10000, 10000);
cameraFolder.open();
function animate() {
	render();
	requestAnimationFrame( animate );
	}

function render() {
	renderer.render( scene, camera );
	}

render();
animate();
</script>
<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 80vw;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	h1 {
		/*font-size: 4rem;
		font-weight: 700;*/
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.section_title{
		@apply text-3xl text-yellow-200 my-4 font-bold

	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
